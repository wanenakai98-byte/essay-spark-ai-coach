
import { useState } from 'react';
import Header from '@/components/Header';
import EssaySubmission from '@/components/EssaySubmission';
import CompactFeedbackDisplay from '@/components/CompactFeedbackDisplay';
import EssayTemplates from '@/components/EssayTemplates';
import AppSidebar from '@/components/AppSidebar';
import { analyzeEssay } from '@/utils/aiAnalysis';
import { Button } from '@/components/ui/button';
import { RotateCcw, Download, Menu } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';

interface FeedbackResult {
  title: string;
  overallScore: number;
  feedback: any[];
  strengths: string[];
  improvements: string[];
}

const Index = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [feedbackResult, setFeedbackResult] = useState<FeedbackResult | null>(null);
  const [activeView, setActiveView] = useState('home');
  const [selectedTemplate, setSelectedTemplate] = useState<{prompt: string, title: string} | null>(null);
  const { toast } = useToast();

  const handleEssaySubmit = async (essay: string, title: string) => {
    setIsAnalyzing(true);
    try {
      const result = await analyzeEssay(essay, title);
      setFeedbackResult(result);
      setActiveView('home');
      toast({
        title: "Analysis Complete!",
        description: "Your essay has been analyzed successfully.",
      });
    } catch (error) {
      toast({
        title: "Analysis Failed",
        description: "There was an error analyzing your essay. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleNewEssay = () => {
    setFeedbackResult(null);
    setActiveView('new-essay');
    setSelectedTemplate(null);
  };

  const handleTemplateSelect = (prompt: string, title: string) => {
    setSelectedTemplate({prompt, title});
    setActiveView('new-essay');
  };

  const handleViewChange = (view: string) => {
    setActiveView(view);
    if (view === 'new-essay') {
      setFeedbackResult(null);
      setSelectedTemplate(null);
    }
  };

  const handleDownloadReport = () => {
    if (!feedbackResult) return;
    
    const report = `
ESSAY ANALYSIS REPORT
Title: ${feedbackResult.title}
Overall Score: ${feedbackResult.overallScore}%

DETAILED FEEDBACK:
${feedbackResult.feedback.map(item => `
${item.category}: ${item.score}%
Status: ${item.status.replace('-', ' ').toUpperCase()}
Feedback: ${item.feedback}
Suggestions: ${item.suggestions.join(', ')}
`).join('\n')}

STRENGTHS:
${feedbackResult.strengths.map(strength => `• ${strength}`).join('\n')}

AREAS FOR IMPROVEMENT:
${feedbackResult.improvements.map(improvement => `• ${improvement}`).join('\n')}

Generated by EssaySpark AI Writing Coach
    `;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${feedbackResult.title}-analysis-report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your analysis report has been saved successfully.",
    });
  };

  const renderContent = () => {
    switch (activeView) {
      case 'templates':
        return <EssayTemplates onSelectTemplate={handleTemplateSelect} />;
      case 'new-essay':
        return (
          <EssaySubmission 
            onSubmit={handleEssaySubmit} 
            isAnalyzing={isAnalyzing}
            selectedTemplate={selectedTemplate}
          />
        );
      case 'history':
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Essay History</h2>
            <p className="text-gray-600 mb-4">Your essay history will appear here.</p>
            <p className="text-sm text-gray-500">Connect to Supabase to enable essay history storage.</p>
          </div>
        );
      case 'settings':
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Settings</h2>
            <p className="text-gray-600">Application settings will be available here.</p>
          </div>
        );
      default:
        return feedbackResult ? (
          <div className="space-y-6">
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6">
              <Button
                onClick={handleNewEssay}
                variant="outline"
                size="lg"
                className="flex items-center gap-2 border-primary text-primary hover:bg-primary hover:text-white transition-colors"
              >
                <RotateCcw size={20} />
                Analyze New Essay
              </Button>
              <Button
                onClick={handleDownloadReport}
                size="lg"
                className="flex items-center gap-2 bg-accent hover:bg-accent/90 text-white"
              >
                <Download size={20} />
                Download Report
              </Button>
            </div>
            
            <CompactFeedbackDisplay
              title={feedbackResult.title}
              overallScore={feedbackResult.overallScore}
              feedback={feedbackResult.feedback}
              strengths={feedbackResult.strengths}
              improvements={feedbackResult.improvements}
            />
          </div>
        ) : (
          <div className="text-center space-y-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-4">Welcome to EssaySpark</h1>
              <p className="text-gray-600 mb-8">AI-powered writing coach to improve your essays</p>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6 max-w-2xl mx-auto">
              <Button
                onClick={() => setActiveView('new-essay')}
                size="lg"
                className="h-24 flex-col gap-2"
              >
                <div className="text-lg font-semibold">Start Writing</div>
                <div className="text-sm opacity-90">Submit your essay for analysis</div>
              </Button>
              
              <Button
                onClick={() => setActiveView('templates')}
                variant="outline"
                size="lg"
                className="h-24 flex-col gap-2"
              >
                <div className="text-lg font-semibold">Browse Templates</div>
                <div className="text-sm opacity-70">Get started with essay prompts</div>
              </Button>
            </div>
          </div>
        );
    }
  };

  return (
    <SidebarProvider>
      <div className="min-h-screen w-full flex">
        <AppSidebar activeView={activeView} onViewChange={handleViewChange} />
        
        <div className="flex-1 flex flex-col">
          <Header />
          
          {/* Mobile sidebar trigger */}
          <div className="md:hidden p-4 border-b">
            <SidebarTrigger className="p-2" />
          </div>
          
          <main className="flex-1 container mx-auto px-4 py-6 md:py-12">
            <div className="animate-fade-in">
              {renderContent()}
            </div>
          </main>

          <footer className="bg-gray-800 text-white py-6 mt-12">
            <div className="container mx-auto px-4 text-center">
              <p className="text-gray-300 text-sm">
                © 2024 EssaySpark AI Writing Coach. Empowering students with intelligent feedback.
              </p>
            </div>
          </footer>
        </div>
      </div>
    </SidebarProvider>
  );
};

export default Index;
